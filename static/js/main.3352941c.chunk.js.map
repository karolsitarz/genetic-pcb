{"version":3,"sources":["logic/direction.ts","app/App.styled.tsx","components/RangeInput.tsx","util/color.ts","util/array.ts","util/number.ts","logic/segment.ts","logic/random.ts","logic/path.ts","logic/individual.ts","logic/problem.ts","components/BoardCanvas.tsx","app/App.tsx","index.tsx"],"names":["Direction","CanvasContainer","styled","div","RangeInput","value","onChange","children","props","className","type","e","target","parseInt","COLORS","HUE","INTENSITY","LIGHTNESS","getColor","i","length","Math","floor","getHSL","compareTuples","a","b","times","n","fun","Array","map","_","splitAt","list","at","slice","DIRECTIONS","Up","Right","Down","Left","rotate","direction","degrees","offset","directionOffset","findIndex","item","Error","directionValue","isHorizontal","randomBetween","min","max","random","randomBool","segmentToCoordinates","start","segment","startX","startY","distance","modifierX","modifierY","roulette","sum","reduce","acc","number","places","weighed","progress","weight","topBound","round","newProgress","rouletteDraw","take","find","WEIGHT","generatePath","width","height","index","end","endX","endY","generated","generateSegments","current","currentX","currentY","leftValue","rightValue","upValue","downValue","directions","maxDistance","isVertical","coordinate","abs","newCurrent","segments","mergeSegments","last","lastDistance","lastDirection","newDistance","newDirection","mutatePath","path","problem","mutationChance","segmentId","mutation","mutationDirection","mutationDistance","splitPoint","mutateSegment","newSegments","merged","clonePath","pair","cloneSegment","individualToCoordinates","individual","paths","initial","coordinates","segmentCoordinates","pathToCoordinates","errorValues","outOfBounds","Object","entries","filter","x","y","grouped","duplication","values","calculateFitness","fitness","outOfBoundsWeights","duplicationWeights","errors","exp","indexes","segmentsCount","getFitness","generateProblem","connectors","populationSize","population","connector","generateIndividual","calculateProblemFitness","getPopulationBest","best","adapt","previousBest","currentBest","Set","forEach","add","newOutOfBoundsWeights","has","toString","group","newDuplicationWeights","populate","newPopulation","parents","mutatedPaths","mutateIndividual","pathsA","pathsB","crossOver","runProblem","run","window","_setGeneration","_isRunning","_setIndividual","populated","calculated","adapted","bestIndividual","Promise","resolve","setTimeout","translate","pos","BoardCanvas","ref","useRef","useEffect","canvas","ctx","getContext","fillStyle","clearRect","xPos","yPos","beginPath","arc","PI","fill","closePath","hue","lightness","lineWidth","lineCap","lineJoin","strokeStyle","moveTo","lineTo","stroke","App","useState","setWidth","setHeight","setPopulation","setMutation","selected","setSelected","setConnectors","setProblem","setIndividual","generation","setGeneration","newConnectors","handleConnectorClick","position","hasConnector","handleDeleteConnection","before","after","style","aspectRatio","gridTemplateColumns","gridTemplateRows","isSelected","color","intensity","onClick","disabled","gridArea","step","undefined","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3352941c.chunk.js","sourcesContent":["import { Pair } from \"util/array\";\n\nexport enum Direction {\n  Up = \"Up\",\n  Down = \"Down\",\n  Left = \"Left\",\n  Right = \"Right\",\n}\nconst DIRECTIONS = [Direction.Up, Direction.Right, Direction.Down, Direction.Left];\n\nexport const rotate = (direction: Direction, degrees: number) => {\n  const offset = (directionOffset(direction) + Math.floor(degrees / 90)) % DIRECTIONS.length;\n  return DIRECTIONS[offset];\n};\n\nexport const directionOffset = (direction: Direction): number => {\n  const offset = DIRECTIONS.findIndex((item) => item === direction);\n  if (offset < 0) throw new Error(\"Incorrect direction passed\");\n  return offset;\n};\n\nexport const directionValue = (direction: Direction): Pair<number> => {\n  if (direction === Direction.Up) return [0, -1];\n  if (direction === Direction.Down) return [0, 1];\n  if (direction === Direction.Left) return [-1, 0];\n  if (direction === Direction.Right) return [1, 0];\n  throw new Error(\"Incorrect direction passed\");\n};\n\nexport const isHorizontal = (direction: Direction) =>\n  direction === Direction.Left || direction === Direction.Right;\n\nexport const isVertical = (direction: Direction) =>\n  direction === Direction.Up || direction === Direction.Down;\n","import styled from \"@emotion/styled\";\n\nexport const CanvasContainer = styled.div`\n  width: 100%;\n  max-width: 75%;\n  max-height: 75%;\n\n  > div > button {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    div {\n      width: 75%;\n      border-radius: 50%;\n      max-width: 0.75rem;\n      &::after {\n        content: \"\";\n        padding-bottom: 100%;\n        display: block;\n      }\n    }\n  }\n`;\n","import { ChangeEvent, InputHTMLAttributes, ReactNode } from \"react\";\n\ntype Props = Omit<InputHTMLAttributes<HTMLInputElement>, \"onChange\"> & {\n  onChange: (arg: number) => void;\n  value: number;\n  children?: (value: number) => ReactNode;\n};\n\nexport const RangeInput = ({ value, onChange, children, ...props }: Props) => {\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e?.target?.value == null) return;\n    const value = parseInt(e.target.value);\n    onChange(value);\n  };\n\n  return (\n    <div className=\"flex w-full\">\n      <input type=\"range\" className=\"flex-1\" onChange={handleChange} value={value} {...props} />\n      <div className=\"w-12 font-bold ml-2 text-right\">\n        {!children && value}\n        {!!children && children(value)}\n      </div>\n    </div>\n  );\n};\n","export const COLORS = [\"red\", \"yellow\", \"green\", \"blue\", \"purple\", \"pink\"];\nexport const HUE = [0, 38, 160, 217, 258, 330];\n\nexport const INTENSITY = [500, 300, 900];\nexport const LIGHTNESS = [60, 80, 40];\n\nexport const getColor = (i: number): [string, number] => [\n  COLORS[i % COLORS.length],\n  INTENSITY[Math.floor(i / COLORS.length) % INTENSITY.length],\n];\n\nexport const getHSL = (i: number): [number, number] => [\n  HUE[i % HUE.length],\n  LIGHTNESS[Math.floor(i / HUE.length) % LIGHTNESS.length],\n];\n","export type Pair<T> = [T, T];\n\nexport const compareTuples = <T>(a: Pair<T>, b: Pair<T>): boolean => a[0] === b[0] && a[1] === b[1];\n\nexport const clonePair = <T>(pair: Pair<T>): Pair<T> => [pair[0], pair[1]];\n\nexport const times = <T>(n: number, fun: (index: number) => T) =>\n  [...new Array(n)].map((_, i) => fun(i));\n\nexport const splitAt = <T>(list: T[], at: number): [T[], T[]] => [\n  list.slice(0, at),\n  list.slice(at),\n];\n","export const roundTo = (number: number, places: number) =>\n  Math.round(number * 10 ** places) / 10 ** places;\n\nexport const randomBetween = (min: number, max: number) =>\n  Math.floor(Math.random() * (max - min)) + min;\n\nexport const randomBool = () => Math.random() < 0.5;\n","import { Pair, times } from \"util/array\";\nimport { Direction, directionValue, isHorizontal, rotate } from \"logic/direction\";\nimport { randomBetween, randomBool } from \"util/number\";\n\nexport type Segment = [number, Direction];\n\nexport const segmentToCoordinates = (start: Pair<number>, segment: Segment): Pair<number>[] => {\n  const [startX, startY] = start;\n  const [distance, direction] = segment;\n  const [modifierX, modifierY] = directionValue(direction);\n  return times(distance, (n) => [startX + (n + 1) * modifierX, startY + (n + 1) * modifierY]);\n};\n\nexport const mutateSegment = (segment: Segment, width: number, height: number): Segment[] => {\n  const [distance, direction] = segment;\n  const mutationDirection = rotate(direction, randomBool() ? 90 : 270);\n  const mutationDistance = randomBetween(1, isHorizontal(direction) ? height : width);\n\n  if (distance == 1 || randomBool())\n    return [\n      [mutationDistance, mutationDirection],\n      [distance, direction],\n      [mutationDistance, rotate(mutationDirection, 180)],\n    ];\n\n  const splitPoint = randomBetween(1, distance);\n  if (randomBool())\n    return [\n      [mutationDistance, mutationDirection],\n      [splitPoint, direction],\n      [mutationDistance, rotate(mutationDirection, 180)],\n      [distance - splitPoint, direction],\n    ];\n\n  return [\n    [splitPoint, direction],\n    [mutationDistance, mutationDirection],\n    [distance - splitPoint, direction],\n    [mutationDistance, rotate(mutationDirection, 180)],\n  ];\n};\n\nexport const cloneSegment = (segment: Segment): Segment => [segment[0], segment[1]];\n","import { roundTo } from \"util/number\";\nimport { times } from \"util/array\";\n\nexport const roulette = <T>(list: [T, number][]) => {\n  const sum = list.reduce((acc, [, weight]) => acc + weight, 0);\n  const { weighed } = list.reduce(\n    ({ weighed, progress }, [item, weight]) => {\n      const topBound = roundTo(weight / sum, 4);\n      if (topBound === 0) return { weighed, progress };\n      const newProgress = topBound + progress;\n      return {\n        weighed: [...weighed, [item, newProgress]] as typeof list,\n        progress: newProgress,\n      };\n    },\n    { weighed: [] as typeof list, progress: 0 },\n  );\n\n  return weighed;\n};\n\nexport const rouletteDraw = <T>(roulette: [T, number][], take = 2) => {\n  return times(take, () => {\n    const random = Math.random();\n    const [item] = roulette.find(([, weight]) => weight > random) || roulette[0];\n    return item;\n  });\n};\n","import { clonePair, compareTuples, Pair, splitAt } from \"util/array\";\nimport { cloneSegment, mutateSegment, Segment, segmentToCoordinates } from \"logic/segment\";\nimport { Connector, Problem } from \"logic/problem\";\nimport { roulette, rouletteDraw } from \"logic/random\";\nimport { Direction, isHorizontal, isVertical, rotate } from \"logic/direction\";\nimport { randomBetween } from \"util/number\";\n\nexport type Path = {\n  start: Pair<number>;\n  index: number;\n  segments: Segment[];\n};\n\nexport const pathToCoordinates = ({ segments, start, index }: Path) => {\n  const initial = {\n    coordinates: [start],\n    start,\n  };\n  const { coordinates } = segments.reduce(({ coordinates, start }, segment) => {\n    const segmentCoordinates = segmentToCoordinates(start, segment);\n    const [, [last]] = splitAt(segmentCoordinates, -1);\n    return {\n      coordinates: [...coordinates, ...segmentCoordinates],\n      start: last,\n    };\n  }, initial);\n\n  return coordinates.map(([x, y]) => [x, y, index]) as [number, number, number][];\n};\n\nconst WEIGHT = 0.5;\n\nexport const generatePath = (\n  [start, end]: Connector,\n  width: number,\n  height: number,\n  index: number,\n): Path => {\n  const [endX, endY] = end;\n\n  const generateSegments = (current: Pair<number>): Segment[] => {\n    if (compareTuples(current, end)) return [];\n    const [currentX, currentY] = current;\n\n    let leftValue = currentX === 0 ? 0 : 1;\n    let rightValue = currentX === width - 1 ? 0 : 1;\n    let upValue = currentY === 0 ? 0 : 1;\n    let downValue = currentY === height - 1 ? 0 : 1;\n\n    if (currentX > endX) leftValue += (currentX - endX) * WEIGHT;\n    if (currentX < endX) rightValue += (endX - currentX) * WEIGHT;\n    if (currentY > endY) upValue += (currentY - endY) * WEIGHT;\n    if (currentY < endY) downValue += (endY - currentY) * WEIGHT;\n\n    const directions: [Direction, number][] = [\n      [Direction.Left, leftValue],\n      [Direction.Right, rightValue],\n      [Direction.Up, upValue],\n      [Direction.Down, downValue],\n    ];\n\n    const [direction] = rouletteDraw(roulette(directions), 1);\n\n    const maxDistance =\n      direction === Direction.Up\n        ? currentY\n        : direction === Direction.Down\n        ? height - currentY\n        : direction === Direction.Left\n        ? currentX\n        : width - currentX;\n\n    let distance = randomBetween(1, maxDistance);\n    if (\n      (currentX === endX && isVertical(direction)) ||\n      (currentY === endY && isHorizontal(direction))\n    ) {\n      const coordinates = segmentToCoordinates(current, [distance, direction]);\n      const isThroughEnd = coordinates.find((coordinate) => compareTuples(coordinate, end));\n      if (isThroughEnd) {\n        distance = Math.abs(currentX - endX + currentY - endY);\n      }\n    }\n\n    const newCurrent: Pair<number> =\n      direction === Direction.Up\n        ? [currentX, currentY - distance]\n        : direction === Direction.Down\n        ? [currentX, currentY + distance]\n        : direction === Direction.Left\n        ? [currentX - distance, currentY]\n        : [currentX + distance, currentY];\n\n    return [[distance, direction], ...generateSegments(newCurrent)];\n  };\n\n  const generated = generateSegments(start);\n  const segments = mergeSegments(generated);\n  return { start, index, segments };\n};\n\nexport const mergeSegments = (segments: Segment[]): Segment[] => {\n  if (segments.length < 2) return segments;\n  return segments.reduce((segments, segment) => {\n    if (segments.length === 0) return [segment];\n    const [distance, direction] = segment;\n    const [list, [last]] = splitAt(segments, -1);\n    const [lastDistance, lastDirection] = last;\n\n    if (lastDirection === direction) {\n      return [...list, [lastDistance + distance, direction]];\n    }\n    if (lastDirection === rotate(direction, 180)) {\n      const newDistance = lastDistance - distance;\n      if (newDistance === 0) {\n        return list;\n      }\n\n      const newDirection = newDistance < 0 ? direction : rotate(direction, 180);\n      return [...list, [Math.abs(newDistance), newDirection]];\n    }\n\n    return [...segments, [distance, direction]];\n  }, [] as Segment[]);\n};\n\nexport const mutatePath = (path: Path, problem: Problem) => {\n  if (randomBetween(0, 100) > problem.mutationChance) return path;\n\n  const { segments } = path;\n  const { width, height } = problem;\n  const segmentId = randomBetween(0, path.segments.length);\n  const segment = segments[segmentId];\n\n  const mutation = mutateSegment(segment, width, height);\n  const newSegments = [\n    ...segments.slice(0, segmentId),\n    ...mutation,\n    ...segments.slice(segmentId + 1),\n  ] as Segment[];\n\n  const merged = mergeSegments(newSegments);\n  return { ...path, segments: merged };\n};\n\nexport const clonePath = ({ segments, start, index }: Path): Path => ({\n  index,\n  start: clonePair(start),\n  segments: segments.map((segment) => cloneSegment(segment)),\n});\n","import { clonePath, generatePath, mutatePath, Path, pathToCoordinates } from \"logic/path\";\nimport { Connector, Problem } from \"logic/problem\";\nimport { randomBetween } from \"util/number\";\n\nexport type Individual = {\n  paths: Path[];\n  fitness?: number;\n};\n\nexport const generateIndividual = (\n  width: number,\n  height: number,\n  connectors: Connector[],\n): Individual => {\n  const paths = connectors.map((connector, index) => generatePath(connector, width, height, index));\n  return { paths };\n};\n\nexport const individualToCoordinates = (individual: Individual) => {\n  const { paths } = individual;\n  return paths.reduce(\n    (list, path) => [...list, ...pathToCoordinates(path)],\n    [] as ReturnType<typeof pathToCoordinates>,\n  );\n};\n\nexport const errorValues = (individual: Individual, problem: Problem) => {\n  const { width, height } = problem;\n  const coordinates = individualToCoordinates(individual);\n\n  const outOfBounds = Object.entries(\n    coordinates\n      .filter(([x, y]) => x < 0 || y < 0 || x >= width || y >= height)\n      .reduce(\n        (grouped, [, , index]) => ({\n          ...grouped,\n          [index]: (grouped?.[index] ?? 0) + 1,\n        }),\n        {} as { [key: number]: number },\n      ),\n  );\n\n  const duplication = Object.values(\n    coordinates.reduce(\n      (grouped, [x, y, index]) => ({\n        ...grouped,\n        [`${x}-${y}`]: [...(grouped?.[`${x}-${y}`] ?? []), index],\n      }),\n      {} as { [key: string]: number[] },\n    ),\n  ).filter((values) => values.length > 1);\n\n  const length = coordinates.length;\n\n  return { outOfBounds, duplication, length };\n};\n\nexport const getFitness = (individual: Individual, problem: Problem): number => {\n  const { paths } = individual;\n  const { outOfBoundsWeights, duplicationWeights } = problem;\n  const errors = errorValues(individual, problem);\n\n  const outOfBounds = errors.outOfBounds.reduce<number>(\n    (value, [index, exp]) => value + outOfBoundsWeights[parseInt(index)] ** exp,\n    0,\n  );\n\n  const duplication = errors.duplication.reduce(\n    (value, indexes) =>\n      value + indexes.reduce((value, index) => value * duplicationWeights[index], 1),\n    0,\n  );\n  const segmentsCount = paths.reduce((value, { segments }) => value + segments.length, 0);\n\n  return 1 / (errors.length + segmentsCount + outOfBounds + duplication);\n};\n\nexport const calculateFitness = (individual: Individual, problem: Problem): Individual => {\n  const fitness = getFitness(individual, problem);\n  return { ...individual, fitness };\n};\n\nexport const crossOver = (\n  { paths: pathsA }: Individual,\n  { paths: pathsB }: Individual,\n): Individual => {\n  const splitPoint = randomBetween(0, pathsA.length + 1);\n  const paths = [\n    ...pathsA.slice(0, splitPoint).map((path) => clonePath(path)),\n    ...pathsB.slice(splitPoint).map((path) => clonePath(path)),\n  ];\n  return { paths };\n};\n\nexport const mutateIndividual = (individual: Individual, problem: Problem): Individual => {\n  const { paths } = individual;\n  const mutatedPaths = paths.map((path) => mutatePath(path, problem));\n  return { ...individual, paths: mutatedPaths };\n};\n","import { Pair, times } from \"util/array\";\nimport {\n  calculateFitness,\n  crossOver,\n  errorValues,\n  generateIndividual,\n  Individual,\n  mutateIndividual,\n} from \"logic/individual\";\nimport { roulette, rouletteDraw } from \"logic/random\";\n\nexport type Connector = Pair<Pair<number>>;\n\nexport type Problem = {\n  width: number;\n  height: number;\n  connectors: Connector[];\n  population: Individual[];\n  duplicationWeights: number[];\n  outOfBoundsWeights: number[];\n  mutationChance: number;\n};\n\nexport const generateProblem = (\n  width: number,\n  height: number,\n  connectors: Connector[],\n  populationSize: number,\n  mutationChance: number,\n): Problem => {\n  const population = times(populationSize, () => generateIndividual(width, height, connectors));\n  return {\n    width,\n    height,\n    connectors,\n    population,\n    duplicationWeights: times(connectors.length, () => width * height),\n    outOfBoundsWeights: times(connectors.length, () => width * height),\n    mutationChance,\n  };\n};\n\nexport const calculateProblemFitness = (problem: Problem): Problem => {\n  const population = problem.population.map((individual) => calculateFitness(individual, problem));\n  return { ...problem, population };\n};\n\nexport const getPopulationBest = (problem: Problem) => {\n  const { population } = problem;\n  return population.reduce<Individual>((best, individual) => {\n    if (individual?.fitness == null) throw new Error(\"The fitness has not been calculated!\");\n    if (best?.fitness == null) throw new Error(\"The fitness has not been calculated!\");\n\n    return individual.fitness > best.fitness ? individual : best;\n  }, population[0]);\n};\n\nexport const adapt = (previousBest: Individual, problem: Problem): Problem => {\n  const { duplicationWeights, outOfBoundsWeights } = problem;\n  const currentBest = getPopulationBest(problem);\n  if (previousBest?.fitness == null) throw new Error(\"The fitness has not been calculated!\");\n  if (currentBest?.fitness == null) throw new Error(\"The fitness has not been calculated!\");\n\n  if (previousBest.fitness <= currentBest.fitness) return problem;\n\n  const errors = errorValues(currentBest, problem);\n\n  const outOfBounds = new Set<string>();\n  errors.outOfBounds.forEach(([index]) => outOfBounds.add(index));\n  const newOutOfBoundsWeights = outOfBoundsWeights.map((weight, index) =>\n    outOfBounds.has(index.toString()) ? weight + 1 : weight,\n  );\n\n  const duplication = new Set<number>();\n  errors.duplication.forEach((group) => group.forEach((item) => duplication.add(item)));\n  const newDuplicationWeights = duplicationWeights.map((weight, index) =>\n    duplication.has(index) ? weight + 1 : weight,\n  );\n\n  return {\n    ...problem,\n    outOfBoundsWeights: newOutOfBoundsWeights,\n    duplicationWeights: newDuplicationWeights,\n  };\n};\n\nexport const populate = (problem: Problem): Problem => {\n  const { population } = problem;\n  const weighed = roulette(\n    population.map((individual) => {\n      if (individual.fitness == null) throw new Error(\"Fitness not calculated\");\n      return [individual, individual.fitness];\n    }),\n  );\n\n  const newPopulation = population.map(() => {\n    const parents = rouletteDraw(weighed);\n    const child = crossOver(parents[0], parents[1]);\n    return mutateIndividual(child, problem);\n  });\n\n  return { ...problem, population: newPopulation };\n};\n\nexport const runProblem = async (problem: Problem) => {\n  let i = 0;\n\n  const run = async (problem: Problem, best: Individual) => {\n    window._setGeneration(i);\n    if (!window._isRunning) return;\n    if (i++ % 5 === 0) {\n      window._setIndividual(best);\n    }\n\n    const populated = populate(problem);\n    const calculated = calculateProblemFitness(populated);\n    const adapted = adapt(best, calculated);\n    const bestIndividual = getPopulationBest(adapted);\n    await new Promise((resolve) => setTimeout(resolve, 1));\n    await run(adapted, bestIndividual);\n  };\n\n  const calculated = calculateProblemFitness(problem);\n  const best = getPopulationBest(calculated);\n  await run(calculated, best);\n};\n","import { useEffect, useRef } from \"react\";\nimport { Individual } from \"logic/individual\";\nimport { Problem } from \"logic/problem\";\nimport { directionValue } from \"logic/direction\";\nimport { getHSL } from \"util/color\";\n\ntype Props = {\n  individual?: Individual;\n  problem: Problem;\n};\n\nconst UNIT = 50;\nconst WIDTH = 6;\nconst translate = (pos: number) => (pos + 1) * UNIT;\n\nexport const BoardCanvas = ({ individual, problem }: Props) => {\n  const ref = useRef<HTMLCanvasElement>(null);\n  const { width, height, connectors } = problem;\n\n  useEffect(() => {\n    const canvas = ref.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    ctx.fillStyle = \"#dddddd\";\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    for (let x = 0; x < width; x++) {\n      const xPos = translate(x);\n      for (let y = 0; y < height; y++) {\n        const yPos = translate(y);\n        ctx.beginPath();\n        ctx.arc(xPos, yPos, WIDTH, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.closePath();\n      }\n    }\n\n    for (let i = 0; i < connectors.length; i++) {\n      const [[startX, startY], [endX, endY]] = connectors[i];\n      const [hue, lightness] = getHSL(i);\n      ctx.fillStyle = `hsl(${hue}, 90%, ${lightness}%)`;\n      ctx.beginPath();\n      ctx.arc(translate(startX), translate(startY), WIDTH * 1.2, 0, 2 * Math.PI);\n      ctx.arc(translate(endX), translate(endY), WIDTH * 1.2, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    if (!individual) return;\n    const { paths } = individual;\n\n    ctx.lineWidth = WIDTH;\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n\n    for (let i = 0; i < paths.length; i++) {\n      const path = paths[i];\n      const { start, segments } = path;\n      let [startX, startY] = start;\n\n      const [hue, lightness] = getHSL(i);\n      ctx.strokeStyle = `hsl(${hue}, 90%, ${lightness}%)`;\n      ctx.beginPath();\n      ctx.moveTo(translate(startX), translate(startY));\n\n      for (const [distance, direction] of segments) {\n        const [modifierX, modifierY] = directionValue(direction);\n        const endX = startX + distance * modifierX;\n        const endY = startY + distance * modifierY;\n        ctx.lineTo(translate(endX), translate(endY));\n        startX = endX;\n        startY = endY;\n      }\n      ctx.stroke();\n      ctx.closePath();\n    }\n  }, [individual, problem]);\n\n  return (\n    <>\n      <canvas\n        ref={ref}\n        className=\"absolute left-0 top-0 bottom-0 right-0 w-full h-full\"\n        width={(width + 1) * UNIT}\n        height={(height + 1) * UNIT}\n      />\n    </>\n  );\n};\n","import { CanvasContainer } from \"app/App.styled\";\nimport { useEffect, useState } from \"react\";\nimport { RangeInput } from \"components/RangeInput\";\nimport { COLORS, getColor, INTENSITY } from \"util/color\";\nimport { FiTrash2 } from \"react-icons/fi\";\nimport { compareTuples, Pair, times } from \"util/array\";\nimport { Connector, generateProblem, Problem, runProblem } from \"logic/problem\";\nimport { Individual } from \"logic/individual\";\nimport { BoardCanvas } from \"components/BoardCanvas\";\n\ndeclare global {\n  interface Window {\n    _isRunning: boolean;\n    _setIndividual: (arg: Individual) => void;\n    _setGeneration: (arg: number) => void;\n  }\n}\n\nexport const App = () => {\n  const [width, setWidth] = useState(8);\n  const [height, setHeight] = useState(8);\n  const [population, setPopulation] = useState(100);\n  const [mutation, setMutation] = useState(10);\n  const [selected, setSelected] = useState<Pair<number> | null>(null);\n  const [connectors, setConnectors] = useState<Connector[]>([]);\n\n  const [problem, setProblem] = useState<Problem>();\n  const [individual, setIndividual] = useState<Individual>();\n  const [generation, setGeneration] = useState(0);\n\n  window._setIndividual = setIndividual;\n  window._setGeneration = setGeneration;\n\n  useEffect(() => {\n    window._isRunning = !!problem;\n    if (!problem) return;\n    runProblem(problem);\n  }, [problem]);\n\n  useEffect(() => {\n    const newConnectors = connectors.filter(\n      ([start, end]) => start[0] < width && start[1] < height && end[0] < width && end[1] < height,\n    );\n    setConnectors(newConnectors);\n  }, [width, height]);\n\n  const handleConnectorClick = (position: Pair<number>, hasConnector: boolean) => () => {\n    if (problem) return;\n    if (hasConnector) return;\n    if (connectors.length === COLORS.length * INTENSITY.length) return;\n\n    if (selected && compareTuples(selected, position)) return setSelected(null);\n    if (!selected) return setSelected(position);\n    setConnectors([...connectors, [selected, position]]);\n    setSelected(null);\n  };\n\n  const handleDeleteConnection = (i: number) => () => {\n    const before = connectors.slice(0, i);\n    const after = connectors.slice(i + 1);\n    setConnectors([...before, ...after]);\n  };\n\n  const handleStart = () => {\n    const problem = generateProblem(width, height, connectors, population, mutation);\n    setProblem(problem);\n    setIndividual(undefined);\n  };\n\n  return (\n    <main className=\"w-screen bg-gray-100 h-screen flex items-stretch\">\n      <section className=\"flex-1 flex items-center justify-center flex-col\">\n        <CanvasContainer\n          className=\"bg-white relative rounded-xl shadow-2xl\"\n          style={{ aspectRatio: `${width} / ${height}` }}\n        >\n          {problem && <BoardCanvas {...{ problem, individual }} />}\n          {!problem && (\n            <div\n              className=\"absolute left-0 top-0 bottom-0 right-0 w-full h-full grid place-items-center\"\n              style={{\n                gridTemplateColumns: `1fr repeat(${width}, 2fr) 1fr`,\n                gridTemplateRows: `1fr repeat(${height}, 2fr) 1fr`,\n              }}\n            >\n              {times(height, (y) =>\n                times(width, (x) => {\n                  const coordinates: Pair<number> = [x, y];\n                  const connector = connectors?.findIndex(\n                    ([start, end]) =>\n                      compareTuples(start, coordinates) || compareTuples(end, coordinates),\n                  );\n                  const hasConnector = connector != null && connector >= 0;\n                  const isSelected = selected && compareTuples(selected, coordinates);\n                  const [color, intensity] = hasConnector\n                    ? getColor(connector)\n                    : isSelected\n                    ? [\"gray\", 600]\n                    : [\"gray\", 300];\n\n                  return (\n                    <button\n                      key={`${x}-${y}`}\n                      className={`${!hasConnector && !problem ? \"group\" : \"cursor-default\"}`}\n                      onClick={handleConnectorClick(coordinates, hasConnector)}\n                      disabled={problem || hasConnector}\n                      style={{\n                        gridArea: `${y + 2} / ${x + 2} / span 1 / span 1`,\n                      }}\n                    >\n                      <div\n                        className={`bg-${color}-${intensity} ${\n                          isSelected ? \"ring-4 ring-gray-300\" : \"\"\n                        } ${hasConnector ? `ring-4 ring-${color}-100` : \"group-hover:bg-gray-600\"}`}\n                      />\n                    </button>\n                  );\n                }),\n              )}\n            </div>\n          )}\n        </CanvasContainer>\n      </section>\n      <aside className=\"max-w-xs w-1/2 flex flex-col p-8 border-l-2\">\n        {!problem && (\n          <>\n            <section>\n              <label className=\"block\">\n                <h1 className=\"font-bold text-gray-700\">Width</h1>\n                <RangeInput value={width} onChange={setWidth} min={5} max={20} />\n              </label>\n\n              <label className=\"mt-4 block\">\n                <h1 className=\"font-bold text-gray-700\">Height</h1>\n                <RangeInput value={height} onChange={setHeight} min={5} max={20} />\n              </label>\n\n              <div className=\"mt-4\">\n                <h1 className=\"font-bold text-gray-700\">Connections</h1>\n                <div className=\"border-2 bg-gray-50 rounded-lg px-4 h-40 overflow-y-auto mt-1 scrollbar-thin scrollbar-thumb-rounded scrollbar-thumb-gray-400\">\n                  {!connectors?.length && (\n                    <div className=\"text-center text-gray-400 text-sm h-full w-full flex justify-center items-center\">\n                      No connections found\n                    </div>\n                  )}\n                  {connectors.map(([start, end], i) => {\n                    const [color, intensity] = getColor(i);\n                    return (\n                      <div key={`${start[0]}-${start[1]}`} className=\"flex items-center py-2 group\">\n                        <div\n                          className={`w-2 h-2 rounded-full mr-2 ring-2 bg-${color}-${intensity} ring-${color}-100`}\n                        />\n                        <span className=\"text-sm text-gray-600\">\n                          ({start[0]}, {start[1]}) - ({end[0]}, {end[1]})\n                        </span>\n                        <button\n                          className=\"p-1 ml-auto hover:opacity-100 opacity-50 transition-opacity focus:outline-none\"\n                          onClick={handleDeleteConnection(i)}\n                        >\n                          <FiTrash2 className=\"group-hover:opacity-100 opacity-30 transition-opacity\" />\n                        </button>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </section>\n            <section className=\"mt-10\">\n              <label className=\"block\">\n                <h1 className=\"font-bold text-gray-700\">Population</h1>\n                <RangeInput\n                  value={population}\n                  onChange={setPopulation}\n                  min={50}\n                  max={1000}\n                  step={50}\n                />\n              </label>\n\n              <label className=\"mt-4 block\">\n                <h1 className=\"font-bold text-gray-700\">Mutation chance</h1>\n                <RangeInput value={mutation} onChange={setMutation} min={1} max={80} step={1}>\n                  {(value) => <>{value}%</>}\n                </RangeInput>\n              </label>\n            </section>\n            {connectors?.length < 2 && (\n              <button\n                className=\"rounded-lg bg-gray-400 text-gray-100 font-bold p-3 mt-10 shadow-lg\"\n                disabled\n              >\n                Start\n              </button>\n            )}\n            {connectors?.length >= 2 && (\n              <button\n                className=\"rounded-lg bg-blue-600 hover:bg-blue-700 transition-colors focus:outline-none text-gray-100 font-bold p-3 mt-10 shadow-lg\"\n                onClick={handleStart}\n              >\n                Start\n              </button>\n            )}\n          </>\n        )}\n        {problem && (\n          <div className=\"d-flex justify-center flex-col my-auto\">\n            <h1 className=\"font-bold text-gray-700\">Generation</h1>\n            <div className=\"mx-auto mb-4\">{generation}</div>\n            <button\n              className=\"rounded-lg bg-gray-500 hover:bg-gray-600 transition-colors focus:outline-none text-gray-100 font-bold p-3 shadow-lg w-full\"\n              onClick={() => setProblem(undefined)}\n            >\n              Stop\n            </button>\n          </div>\n        )}\n      </aside>\n    </main>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"app/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}