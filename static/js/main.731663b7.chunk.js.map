{"version":3,"sources":["logic/direction.ts","app/App.styled.tsx","components/RangeInput.tsx","util/color.ts","util/array.ts","util/number.ts","logic/segment.ts","logic/random.ts","logic/path.ts","logic/individual.ts","logic/problem.ts","components/BoardCanvas.tsx","app/App.tsx","index.tsx"],"names":["Direction","CanvasContainer","styled","div","height","width","RangeInput","value","onChange","children","min","max","step","className","label","useState","innerValue","setInnerValue","values","onFinalChange","renderTrack","props","renderThumb","COLORS","HUE","INTENSITY","LIGHTNESS","getColor","i","length","Math","floor","getHSL","compareTuples","a","b","times","n","fun","Array","map","_","splitAt","list","at","slice","DIRECTIONS","Up","Right","Down","Left","rotate","direction","degrees","offset","directionOffset","findIndex","item","Error","directionValue","isHorizontal","randomBetween","random","randomBool","segmentToCoordinates","start","segment","startX","startY","distance","modifierX","modifierY","roulette","sum","reduce","acc","number","places","weighed","progress","weight","topBound","round","newProgress","rouletteDraw","take","find","WEIGHT","generatePath","index","end","endX","endY","generated","generateSegments","current","currentX","currentY","leftValue","rightValue","upValue","downValue","directions","maxDistance","isVertical","coordinate","abs","newCurrent","segments","mergeSegments","last","lastDistance","lastDirection","newDistance","newDirection","mutatePath","path","problem","mutationChance","segmentId","mutation","mutationDirection","mutationDistance","splitPoint","mutateSegment","newSegments","merged","clonePath","pair","cloneSegment","individualToCoordinates","individual","paths","initial","coordinates","segmentCoordinates","pathToCoordinates","errorValues","outOfBounds","Object","entries","filter","x","y","grouped","duplication","calculateFitness","fitness","outOfBoundsWeights","duplicationWeights","errors","exp","parseInt","indexes","segmentsCount","getFitness","generateProblem","connectors","populationSize","population","connector","generateIndividual","calculateProblemFitness","getPopulationBest","best","adapt","previousBest","currentBest","Set","forEach","add","newOutOfBoundsWeights","has","toString","group","newDuplicationWeights","populate","newPopulation","parents","mutatedPaths","mutateIndividual","pathsA","pathsB","crossOver","runProblem","window","__drawBoard","run","__updateGeneration","__isRunning","__drawIndividual","populated","calculated","adapted","bestIndividual","Promise","resolve","setTimeout","translate","pos","BoardCanvas","isRunning","ref","useRef","canvas","ctx","getContext","fillStyle","clearRect","xPos","yPos","beginPath","arc","PI","fill","closePath","hue","lightness","lineWidth","lineCap","lineJoin","strokeStyle","moveTo","lineTo","stroke","App","setWidth","setHeight","setPopulation","setMutation","selected","setSelected","setConnectors","setIsRunning","generationRef","generation","innerText","useEffect","newConnectors","handleConnectorClick","position","hasConnector","handleDeleteConnection","before","after","style","maxWidth","isSelected","color","intensity","onClick","disabled","left","top","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.731663b7.chunk.js","sourcesContent":["import { Pair } from \"util/array\";\n\nexport enum Direction {\n  Up = \"Up\",\n  Down = \"Down\",\n  Left = \"Left\",\n  Right = \"Right\",\n}\nconst DIRECTIONS = [Direction.Up, Direction.Right, Direction.Down, Direction.Left];\n\nexport const rotate = (direction: Direction, degrees: number) => {\n  const offset = (directionOffset(direction) + Math.floor(degrees / 90)) % DIRECTIONS.length;\n  return DIRECTIONS[offset];\n};\n\nexport const directionOffset = (direction: Direction): number => {\n  const offset = DIRECTIONS.findIndex((item) => item === direction);\n  if (offset < 0) throw new Error(\"Incorrect direction passed\");\n  return offset;\n};\n\nexport const directionValue = (direction: Direction): Pair<number> => {\n  if (direction === Direction.Up) return [0, -1];\n  if (direction === Direction.Down) return [0, 1];\n  if (direction === Direction.Left) return [-1, 0];\n  if (direction === Direction.Right) return [1, 0];\n  throw new Error(\"Incorrect direction passed\");\n};\n\nexport const isHorizontal = (direction: Direction) =>\n  direction === Direction.Left || direction === Direction.Right;\n\nexport const isVertical = (direction: Direction) =>\n  direction === Direction.Up || direction === Direction.Down;\n","import styled from \"@emotion/styled\";\n\ntype Props = {\n  width: number;\n  height: number;\n};\n\nexport const CanvasContainer = styled.div<Props>`\n  width: 100%;\n\n  &::before {\n    content: \"\";\n    display: block;\n    padding-bottom: ${({ height, width }) => (height * 100) / width}%;\n  }\n\n  > div {\n    width: calc(100% * ${({ width }) => `${width} / ${width + 1}`});\n    height: calc(100% * ${({ height }) => `${height} / ${height + 1}`});\n    left: calc(100% / ${({ width }) => width + 1} / 2);\n    top: calc(100% / ${({ height }) => height + 1} / 2);\n\n    > button {\n      width: calc(100% / ${({ width }) => width});\n      height: calc(100% / ${({ height }) => height});      \n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n\n      div {\n        width: 75%;\n        border-radius: 50%;\n        max-width: 0.75rem;\n        &::after {\n          content: \"\";\n          padding-bottom: 100%;\n          display: block;\n        }\n      }\n    }\n`;\n","import { ReactNode, useState } from \"react\";\nimport { Range } from \"react-range\";\n\ntype Props = {\n  onChange: (arg: number) => void;\n  value: number;\n  children?: (value: number) => ReactNode;\n  min: number;\n  max: number;\n  step?: number;\n  className?: string;\n  label: string;\n};\n\nexport const RangeInput = ({\n  value,\n  onChange,\n  children,\n  min,\n  max,\n  step,\n  className,\n  label,\n}: Props) => {\n  const [innerValue, setInnerValue] = useState(value);\n\n  return (\n    <label className={`block ${className}`}>\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"font-bold text-gray-700 mr-4\">{label}</h1>\n        <span className=\"text-gray-500 font-bold\">\n          {children ? children(innerValue) : innerValue}\n        </span>\n      </div>\n      <div className=\"py-4 w-full\">\n        <Range\n          values={[innerValue]}\n          onChange={([value]) => setInnerValue(value)}\n          onFinalChange={([value]) => onChange(value)}\n          renderTrack={({ props, children }) => (\n            <div\n              className=\"w-full h-2 md:h-1 rounded-full bg-gray-300 focus-within:bg-blue-200\"\n              {...props}\n            >\n              {children}\n            </div>\n          )}\n          renderThumb={({ props }) => (\n            <div\n              className=\"h-6 w-6 md:h-4 md:w-4 rounded-full bg-blue-500 shadow focus:outline-none focus:bg-blue-700\"\n              {...props}\n            />\n          )}\n          {...{ min, max, step }}\n        />\n      </div>\n    </label>\n  );\n};\n","export const COLORS = [\"red\", \"yellow\", \"green\", \"blue\", \"purple\", \"pink\"];\nexport const HUE = [0, 38, 160, 217, 258, 330];\n\nexport const INTENSITY = [500, 300, 900];\nexport const LIGHTNESS = [60, 80, 40];\n\nexport const getColor = (i: number): [string, number] => [\n  COLORS[i % COLORS.length],\n  INTENSITY[Math.floor(i / COLORS.length) % INTENSITY.length],\n];\n\nexport const getHSL = (i: number): [number, number] => [\n  HUE[i % HUE.length],\n  LIGHTNESS[Math.floor(i / HUE.length) % LIGHTNESS.length],\n];\n","export type Pair<T> = [T, T];\n\nexport const compareTuples = <T>(a: Pair<T>, b: Pair<T>): boolean => a[0] === b[0] && a[1] === b[1];\n\nexport const clonePair = <T>(pair: Pair<T>): Pair<T> => [pair[0], pair[1]];\n\nexport const times = <T>(n: number, fun: (index: number) => T) =>\n  [...new Array(n)].map((_, i) => fun(i));\n\nexport const splitAt = <T>(list: T[], at: number): [T[], T[]] => [\n  list.slice(0, at),\n  list.slice(at),\n];\n","export const roundTo = (number: number, places: number) =>\n  Math.round(number * 10 ** places) / 10 ** places;\n\nexport const randomBetween = (min: number, max: number) =>\n  Math.floor(Math.random() * (max - min)) + min;\n\nexport const randomBool = () => Math.random() < 0.5;\n","import { Pair, times } from \"util/array\";\nimport { Direction, directionValue, isHorizontal, rotate } from \"logic/direction\";\nimport { randomBetween, randomBool } from \"util/number\";\n\nexport type Segment = [number, Direction];\n\nexport const segmentToCoordinates = (start: Pair<number>, segment: Segment): Pair<number>[] => {\n  const [startX, startY] = start;\n  const [distance, direction] = segment;\n  const [modifierX, modifierY] = directionValue(direction);\n  return times(distance, (n) => [startX + (n + 1) * modifierX, startY + (n + 1) * modifierY]);\n};\n\nexport const mutateSegment = (segment: Segment, width: number, height: number): Segment[] => {\n  const [distance, direction] = segment;\n  const mutationDirection = rotate(direction, randomBool() ? 90 : 270);\n  const mutationDistance = randomBetween(1, isHorizontal(direction) ? height : width);\n\n  if (distance == 1 || randomBool())\n    return [\n      [mutationDistance, mutationDirection],\n      [distance, direction],\n      [mutationDistance, rotate(mutationDirection, 180)],\n    ];\n\n  const splitPoint = randomBetween(1, distance);\n  if (randomBool())\n    return [\n      [mutationDistance, mutationDirection],\n      [splitPoint, direction],\n      [mutationDistance, rotate(mutationDirection, 180)],\n      [distance - splitPoint, direction],\n    ];\n\n  return [\n    [splitPoint, direction],\n    [mutationDistance, mutationDirection],\n    [distance - splitPoint, direction],\n    [mutationDistance, rotate(mutationDirection, 180)],\n  ];\n};\n\nexport const cloneSegment = (segment: Segment): Segment => [segment[0], segment[1]];\n","import { roundTo } from \"util/number\";\nimport { times } from \"util/array\";\n\nexport const roulette = <T>(list: [T, number][]) => {\n  const sum = list.reduce((acc, [, weight]) => acc + weight, 0);\n  const { weighed } = list.reduce(\n    ({ weighed, progress }, [item, weight]) => {\n      const topBound = roundTo(weight / sum, 4);\n      if (topBound === 0) return { weighed, progress };\n      const newProgress = topBound + progress;\n      return {\n        weighed: [...weighed, [item, newProgress]] as typeof list,\n        progress: newProgress,\n      };\n    },\n    { weighed: [] as typeof list, progress: 0 },\n  );\n\n  return weighed;\n};\n\nexport const rouletteDraw = <T>(roulette: [T, number][], take = 2) => {\n  return times(take, () => {\n    const random = Math.random();\n    const [item] = roulette.find(([, weight]) => weight > random) || roulette[0];\n    return item;\n  });\n};\n","import { clonePair, compareTuples, Pair, splitAt } from \"util/array\";\nimport { cloneSegment, mutateSegment, Segment, segmentToCoordinates } from \"logic/segment\";\nimport { Connector, Problem } from \"logic/problem\";\nimport { roulette, rouletteDraw } from \"logic/random\";\nimport { Direction, isHorizontal, isVertical, rotate } from \"logic/direction\";\nimport { randomBetween } from \"util/number\";\n\nexport type Path = {\n  start: Pair<number>;\n  index: number;\n  segments: Segment[];\n};\n\nexport const pathToCoordinates = ({ segments, start, index }: Path) => {\n  const initial = {\n    coordinates: [start],\n    start,\n  };\n  const { coordinates } = segments.reduce(({ coordinates, start }, segment) => {\n    const segmentCoordinates = segmentToCoordinates(start, segment);\n    const [, [last]] = splitAt(segmentCoordinates, -1);\n    return {\n      coordinates: [...coordinates, ...segmentCoordinates],\n      start: last,\n    };\n  }, initial);\n\n  return coordinates.map(([x, y]) => [x, y, index]) as [number, number, number][];\n};\n\nconst WEIGHT = 0.5;\n\nexport const generatePath = (\n  [start, end]: Connector,\n  width: number,\n  height: number,\n  index: number,\n): Path => {\n  const [endX, endY] = end;\n\n  const generateSegments = (current: Pair<number>): Segment[] => {\n    if (compareTuples(current, end)) return [];\n    const [currentX, currentY] = current;\n\n    let leftValue = currentX === 0 ? 0 : 1;\n    let rightValue = currentX === width - 1 ? 0 : 1;\n    let upValue = currentY === 0 ? 0 : 1;\n    let downValue = currentY === height - 1 ? 0 : 1;\n\n    if (currentX > endX) leftValue += (currentX - endX) * WEIGHT;\n    if (currentX < endX) rightValue += (endX - currentX) * WEIGHT;\n    if (currentY > endY) upValue += (currentY - endY) * WEIGHT;\n    if (currentY < endY) downValue += (endY - currentY) * WEIGHT;\n\n    const directions: [Direction, number][] = [\n      [Direction.Left, leftValue],\n      [Direction.Right, rightValue],\n      [Direction.Up, upValue],\n      [Direction.Down, downValue],\n    ];\n\n    const [direction] = rouletteDraw(roulette(directions), 1);\n\n    const maxDistance =\n      direction === Direction.Up\n        ? currentY\n        : direction === Direction.Down\n        ? height - currentY\n        : direction === Direction.Left\n        ? currentX\n        : width - currentX;\n\n    let distance = randomBetween(1, maxDistance);\n    if (\n      (currentX === endX && isVertical(direction)) ||\n      (currentY === endY && isHorizontal(direction))\n    ) {\n      const coordinates = segmentToCoordinates(current, [distance, direction]);\n      const isThroughEnd = coordinates.find((coordinate) => compareTuples(coordinate, end));\n      if (isThroughEnd) {\n        distance = Math.abs(currentX - endX + currentY - endY);\n      }\n    }\n\n    const newCurrent: Pair<number> =\n      direction === Direction.Up\n        ? [currentX, currentY - distance]\n        : direction === Direction.Down\n        ? [currentX, currentY + distance]\n        : direction === Direction.Left\n        ? [currentX - distance, currentY]\n        : [currentX + distance, currentY];\n\n    return [[distance, direction], ...generateSegments(newCurrent)];\n  };\n\n  const generated = generateSegments(start);\n  const segments = mergeSegments(generated);\n  return { start, index, segments };\n};\n\nexport const mergeSegments = (segments: Segment[]): Segment[] => {\n  if (segments.length < 2) return segments;\n  return segments.reduce((segments, segment) => {\n    if (segments.length === 0) return [segment];\n    const [distance, direction] = segment;\n    const [list, [last]] = splitAt(segments, -1);\n    const [lastDistance, lastDirection] = last;\n\n    if (lastDirection === direction) {\n      return [...list, [lastDistance + distance, direction]];\n    }\n    if (lastDirection === rotate(direction, 180)) {\n      const newDistance = lastDistance - distance;\n      if (newDistance === 0) {\n        return list;\n      }\n\n      const newDirection = newDistance < 0 ? direction : rotate(direction, 180);\n      return [...list, [Math.abs(newDistance), newDirection]];\n    }\n\n    return [...segments, [distance, direction]];\n  }, [] as Segment[]);\n};\n\nexport const mutatePath = (path: Path, problem: Problem) => {\n  if (randomBetween(0, 100) > problem.mutationChance) return path;\n\n  const { segments } = path;\n  const { width, height } = problem;\n  const segmentId = randomBetween(0, path.segments.length);\n  const segment = segments[segmentId];\n\n  const mutation = mutateSegment(segment, width, height);\n  const newSegments = [\n    ...segments.slice(0, segmentId),\n    ...mutation,\n    ...segments.slice(segmentId + 1),\n  ] as Segment[];\n\n  const merged = mergeSegments(newSegments);\n  return { ...path, segments: merged };\n};\n\nexport const clonePath = ({ segments, start, index }: Path): Path => ({\n  index,\n  start: clonePair(start),\n  segments: segments.map((segment) => cloneSegment(segment)),\n});\n","import { clonePath, generatePath, mutatePath, Path, pathToCoordinates } from \"logic/path\";\nimport { Connector, Problem } from \"logic/problem\";\nimport { randomBetween } from \"util/number\";\n\nexport type Individual = {\n  paths: Path[];\n  fitness?: number;\n};\n\nexport const generateIndividual = (\n  width: number,\n  height: number,\n  connectors: Connector[],\n): Individual => {\n  const paths = connectors.map((connector, index) => generatePath(connector, width, height, index));\n  return { paths };\n};\n\nexport const individualToCoordinates = (individual: Individual) => {\n  const { paths } = individual;\n  return paths.reduce(\n    (list, path) => [...list, ...pathToCoordinates(path)],\n    [] as ReturnType<typeof pathToCoordinates>,\n  );\n};\n\nexport const errorValues = (individual: Individual, problem: Problem) => {\n  const { width, height } = problem;\n  const coordinates = individualToCoordinates(individual);\n\n  const outOfBounds = Object.entries(\n    coordinates\n      .filter(([x, y]) => x < 0 || y < 0 || x >= width || y >= height)\n      .reduce(\n        (grouped, [, , index]) => ({\n          ...grouped,\n          [index]: (grouped?.[index] ?? 0) + 1,\n        }),\n        {} as { [key: number]: number },\n      ),\n  );\n\n  const duplication = Object.values(\n    coordinates.reduce(\n      (grouped, [x, y, index]) => ({\n        ...grouped,\n        [`${x}-${y}`]: [...(grouped?.[`${x}-${y}`] ?? []), index],\n      }),\n      {} as { [key: string]: number[] },\n    ),\n  ).filter((values) => values.length > 1);\n\n  const length = coordinates.length;\n\n  return { outOfBounds, duplication, length };\n};\n\nexport const getFitness = (individual: Individual, problem: Problem): number => {\n  const { paths } = individual;\n  const { outOfBoundsWeights, duplicationWeights } = problem;\n  const errors = errorValues(individual, problem);\n\n  const outOfBounds = errors.outOfBounds.reduce<number>(\n    (value, [index, exp]) => value + outOfBoundsWeights[parseInt(index)] ** exp,\n    0,\n  );\n\n  const duplication = errors.duplication.reduce(\n    (value, indexes) =>\n      value + indexes.reduce((value, index) => value * duplicationWeights[index], 1),\n    0,\n  );\n  const segmentsCount = paths.reduce((value, { segments }) => value + segments.length, 0);\n\n  return 1 / (errors.length + segmentsCount + outOfBounds + duplication);\n};\n\nexport const calculateFitness = (individual: Individual, problem: Problem): Individual => {\n  const fitness = getFitness(individual, problem);\n  return { ...individual, fitness };\n};\n\nexport const crossOver = (\n  { paths: pathsA }: Individual,\n  { paths: pathsB }: Individual,\n): Individual => {\n  const splitPoint = randomBetween(0, pathsA.length + 1);\n  const paths = [\n    ...pathsA.slice(0, splitPoint).map((path) => clonePath(path)),\n    ...pathsB.slice(splitPoint).map((path) => clonePath(path)),\n  ];\n  return { paths };\n};\n\nexport const mutateIndividual = (individual: Individual, problem: Problem): Individual => {\n  const { paths } = individual;\n  const mutatedPaths = paths.map((path) => mutatePath(path, problem));\n  return { ...individual, paths: mutatedPaths };\n};\n","import { Pair, times } from \"util/array\";\nimport {\n  calculateFitness,\n  crossOver,\n  errorValues,\n  generateIndividual,\n  Individual,\n  mutateIndividual,\n} from \"logic/individual\";\nimport { roulette, rouletteDraw } from \"logic/random\";\n\nexport type Connector = Pair<Pair<number>>;\n\nexport type Problem = {\n  width: number;\n  height: number;\n  connectors: Connector[];\n  population: Individual[];\n  duplicationWeights: number[];\n  outOfBoundsWeights: number[];\n  mutationChance: number;\n};\n\nexport const generateProblem = (\n  width: number,\n  height: number,\n  connectors: Connector[],\n  populationSize: number,\n  mutationChance: number,\n): Problem => {\n  const population = times(populationSize, () => generateIndividual(width, height, connectors));\n  return {\n    width,\n    height,\n    connectors,\n    population,\n    duplicationWeights: times(connectors.length, () => width * height),\n    outOfBoundsWeights: times(connectors.length, () => width * height),\n    mutationChance,\n  };\n};\n\nexport const calculateProblemFitness = (problem: Problem): Problem => {\n  const population = problem.population.map((individual) => calculateFitness(individual, problem));\n  return { ...problem, population };\n};\n\nexport const getPopulationBest = (problem: Problem) => {\n  const { population } = problem;\n  return population.reduce<Individual>((best, individual) => {\n    if (individual?.fitness == null) throw new Error(\"The fitness has not been calculated!\");\n    if (best?.fitness == null) throw new Error(\"The fitness has not been calculated!\");\n\n    return individual.fitness > best.fitness ? individual : best;\n  }, population[0]);\n};\n\nexport const adapt = (previousBest: Individual, problem: Problem): Problem => {\n  const { duplicationWeights, outOfBoundsWeights } = problem;\n  const currentBest = getPopulationBest(problem);\n  if (previousBest?.fitness == null) throw new Error(\"The fitness has not been calculated!\");\n  if (currentBest?.fitness == null) throw new Error(\"The fitness has not been calculated!\");\n\n  if (previousBest.fitness <= currentBest.fitness) return problem;\n\n  const errors = errorValues(currentBest, problem);\n\n  const outOfBounds = new Set<string>();\n  errors.outOfBounds.forEach(([index]) => outOfBounds.add(index));\n  const newOutOfBoundsWeights = outOfBoundsWeights.map((weight, index) =>\n    outOfBounds.has(index.toString()) ? weight + 1 : weight,\n  );\n\n  const duplication = new Set<number>();\n  errors.duplication.forEach((group) => group.forEach((item) => duplication.add(item)));\n  const newDuplicationWeights = duplicationWeights.map((weight, index) =>\n    duplication.has(index) ? weight + 1 : weight,\n  );\n\n  return {\n    ...problem,\n    outOfBoundsWeights: newOutOfBoundsWeights,\n    duplicationWeights: newDuplicationWeights,\n  };\n};\n\nexport const populate = (problem: Problem): Problem => {\n  const { population } = problem;\n  const weighed = roulette(\n    population.map((individual) => {\n      if (individual.fitness == null) throw new Error(\"Fitness not calculated\");\n      return [individual, individual.fitness];\n    }),\n  );\n\n  const newPopulation = population.map(() => {\n    const parents = rouletteDraw(weighed);\n    const child = crossOver(parents[0], parents[1]);\n    return mutateIndividual(child, problem);\n  });\n\n  return { ...problem, population: newPopulation };\n};\n\nexport const runProblem = async (problem: Problem) => {\n  let i = 0;\n  window.__drawBoard(problem);\n\n  const run = async (problem: Problem, best: Individual) => {\n    window.__updateGeneration(i);\n    if (!window.__isRunning) return;\n    if (i++ % 5 === 0) {\n      window.__drawIndividual(best, problem);\n    }\n\n    const populated = populate(problem);\n    const calculated = calculateProblemFitness(populated);\n    const adapted = adapt(best, calculated);\n    const bestIndividual = getPopulationBest(adapted);\n    await new Promise((resolve) => setTimeout(resolve, 1));\n    await run(adapted, bestIndividual);\n  };\n\n  const calculated = calculateProblemFitness(problem);\n  const best = getPopulationBest(calculated);\n  await run(calculated, best);\n};\n","import { useRef } from \"react\";\nimport { Individual } from \"logic/individual\";\nimport { Problem } from \"logic/problem\";\nimport { directionValue } from \"logic/direction\";\nimport { getHSL } from \"util/color\";\n\nconst UNIT = 50;\nconst WIDTH = 6;\nconst translate = (pos: number) => (pos + 1) * UNIT;\n\ntype Props = {\n  width: number;\n  height: number;\n  isRunning: boolean;\n};\n\nexport const BoardCanvas = ({ height, width, isRunning }: Props) => {\n  const ref = useRef<HTMLCanvasElement>(null);\n\n  window.__drawBoard = (problem: Problem) => {\n    const { width, height, connectors } = problem;\n    const canvas = ref.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    ctx.fillStyle = \"#dddddd\";\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    for (let x = 0; x < width; x++) {\n      const xPos = translate(x);\n      for (let y = 0; y < height; y++) {\n        const yPos = translate(y);\n        ctx.beginPath();\n        ctx.arc(xPos, yPos, WIDTH, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.closePath();\n      }\n    }\n\n    for (let i = 0; i < connectors.length; i++) {\n      const [[startX, startY], [endX, endY]] = connectors[i];\n      const [hue, lightness] = getHSL(i);\n      ctx.fillStyle = `hsl(${hue}, 90%, ${lightness}%)`;\n      ctx.beginPath();\n      ctx.arc(translate(startX), translate(startY), WIDTH * 1.2, 0, 2 * Math.PI);\n      ctx.arc(translate(endX), translate(endY), WIDTH * 1.2, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.closePath();\n    }\n  };\n\n  window.__drawIndividual = (individual: Individual, problem: Problem) => {\n    window.__drawBoard(problem);\n    const canvas = ref.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    const { paths } = individual;\n\n    ctx.lineWidth = WIDTH;\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n\n    for (let i = 0; i < paths.length; i++) {\n      const path = paths[i];\n      const { start, segments } = path;\n      let [startX, startY] = start;\n\n      const [hue, lightness] = getHSL(i);\n      ctx.strokeStyle = `hsl(${hue}, 90%, ${lightness}%)`;\n      ctx.beginPath();\n      ctx.moveTo(translate(startX), translate(startY));\n\n      for (const [distance, direction] of segments) {\n        const [modifierX, modifierY] = directionValue(direction);\n        const endX = startX + distance * modifierX;\n        const endY = startY + distance * modifierY;\n        ctx.lineTo(translate(endX), translate(endY));\n        startX = endX;\n        startY = endY;\n      }\n      ctx.stroke();\n      ctx.closePath();\n    }\n  };\n\n  return (\n    <canvas\n      ref={ref}\n      className={`absolute left-0 top-0 bottom-0 right-0 w-full h-full ${\n        !isRunning ? \"pointer-events-none opacity-0\" : \"\"\n      }`}\n      width={(width + 1) * UNIT}\n      height={(height + 1) * UNIT}\n    />\n  );\n};\n","import { CanvasContainer } from \"app/App.styled\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { RangeInput } from \"components/RangeInput\";\nimport { COLORS, getColor, INTENSITY } from \"util/color\";\nimport { FiTrash2 } from \"react-icons/fi\";\nimport { compareTuples, Pair, times } from \"util/array\";\nimport { Connector, generateProblem, runProblem } from \"logic/problem\";\nimport { BoardCanvas } from \"components/BoardCanvas\";\n\nexport const App = () => {\n  const [width, setWidth] = useState(8);\n  const [height, setHeight] = useState(8);\n  const [population, setPopulation] = useState(100);\n  const [mutation, setMutation] = useState(10);\n  const [selected, setSelected] = useState<Pair<number> | null>(null);\n  const [connectors, setConnectors] = useState<Connector[]>([]);\n\n  const [isRunning, setIsRunning] = useState(false);\n  const generationRef = useRef<HTMLDivElement>(null);\n\n  window.__updateGeneration = (number) => {\n    const generation = generationRef?.current;\n    if (!generation) return;\n    generation.innerText = number.toString();\n  };\n\n  useEffect(() => {\n    if (selected) setSelected(null);\n\n    const newConnectors = connectors.filter(\n      ([start, end]) => start[0] < width && start[1] < height && end[0] < width && end[1] < height,\n    );\n    setConnectors(newConnectors);\n  }, [width, height]);\n\n  const handleConnectorClick = (position: Pair<number>, hasConnector: boolean) => () => {\n    if (isRunning) return;\n    if (hasConnector) return;\n    if (connectors.length === COLORS.length * INTENSITY.length) return;\n\n    if (selected && compareTuples(selected, position)) return setSelected(null);\n    if (!selected) return setSelected(position);\n    setConnectors([...connectors, [selected, position]]);\n    setSelected(null);\n  };\n\n  const handleDeleteConnection = (i: number) => () => {\n    const before = connectors.slice(0, i);\n    const after = connectors.slice(i + 1);\n    setConnectors([...before, ...after]);\n  };\n\n  const handleStart = () => {\n    const problem = generateProblem(width, height, connectors, population, mutation);\n    window.__isRunning = true;\n    setIsRunning(true);\n    runProblem(problem);\n  };\n\n  const handleStop = () => {\n    window.__isRunning = false;\n    setIsRunning(false);\n  };\n\n  return (\n    <div className=\"h-screen overflow-y-auto overflow-x-hidden scrollbar-thin scrollbar-thumb-rounded scrollbar-thumb-gray-400\">\n      <main className=\"bg-gray-200 md:bg-gray-100 min-h-screen w-full flex flex-col md:flex-row items-stretch\">\n        <section className=\"flex-grow flex items-center justify-center flex-col h-screenpeek md:h-auto sticky top-0\">\n          <CanvasContainer\n            className=\"bg-white relative rounded-xl shadow-2xl\"\n            style={{\n              maxWidth: `min(max(calc(${width} / ${height} * 80%), calc(${height} / ${width} * 70vh)), 80%, calc(${width} / ${height} * 70vh))`,\n            }}\n            {...{ width, height }}\n          >\n            <BoardCanvas {...{ width, height, isRunning }} />\n            {!isRunning && (\n              <div className=\"absolute\">\n                {times(height, (y) =>\n                  times(width, (x) => {\n                    const coordinates: Pair<number> = [x, y];\n                    const connector = connectors?.findIndex(\n                      ([start, end]) =>\n                        compareTuples(start, coordinates) || compareTuples(end, coordinates),\n                    );\n                    const hasConnector = connector != null && connector >= 0;\n                    const isSelected = selected && compareTuples(selected, coordinates);\n                    const [color, intensity] = hasConnector\n                      ? getColor(connector)\n                      : isSelected\n                      ? [\"gray\", 600]\n                      : [\"gray\", 300];\n\n                    return (\n                      <button\n                        key={`${x}-${y}`}\n                        className={`absolute ${\n                          !hasConnector && !isRunning ? \"group\" : \"cursor-default\"\n                        }`}\n                        onClick={handleConnectorClick(coordinates, hasConnector)}\n                        disabled={isRunning || hasConnector}\n                        style={{\n                          left: `calc(100% / ${width} * ${x})`,\n                          top: `calc(100% / ${height} * ${y})`,\n                        }}\n                      >\n                        <div\n                          className={`transition-colors bg-${color}-${intensity} ${\n                            isSelected ? \"ring-4 ring-gray-300\" : \"\"\n                          } ${\n                            hasConnector ? `ring-4 ring-${color}-100` : \"group-hover:bg-gray-600\"\n                          }`}\n                        />\n                      </button>\n                    );\n                  }),\n                )}\n              </div>\n            )}\n          </CanvasContainer>\n        </section>\n        <aside className=\"md:max-w-xs md:w-1/2 p-8 pt-12 md:pt-8 md:border-l-2 bg-gray-100 z-10 rounded-t-3xl md:rounded-none shadow-blur md:shadow-none md:max-h-screen overflow-y-auto scrollbar-thin scrollbar-thumb-rounded scrollbar-thumb-gray-400\">\n          <div className=\"flex flex-col max-w-sm mx-auto\">\n            {!isRunning && (\n              <>\n                <section>\n                  <RangeInput value={width} onChange={setWidth} min={5} max={20} label=\"Width\" />\n                  <RangeInput\n                    value={height}\n                    onChange={setHeight}\n                    min={5}\n                    max={20}\n                    label=\"Height\"\n                    className=\"mt-4\"\n                  />\n\n                  <div className=\"mt-4\">\n                    <h1 className=\"font-bold text-gray-700\">Connections</h1>\n                    <div className=\"border-2 bg-gray-50 rounded-lg px-4 h-40 overflow-y-auto mt-1 scrollbar-thin scrollbar-thumb-rounded scrollbar-thumb-gray-400\">\n                      {!connectors?.length && (\n                        <div className=\"text-center text-gray-400 text-sm h-full w-full flex justify-center items-center\">\n                          No connections found\n                        </div>\n                      )}\n                      {connectors.map(([start, end], i) => {\n                        const [color, intensity] = getColor(i);\n                        return (\n                          <div\n                            key={`${start[0]}-${start[1]}`}\n                            className=\"flex items-center py-2 group\"\n                          >\n                            <div\n                              className={`w-2 h-2 rounded-full mr-2 ring-2 bg-${color}-${intensity} ring-${color}-100`}\n                            />\n                            <span className=\"text-sm text-gray-600\">\n                              ({start[0]}, {start[1]}) - ({end[0]}, {end[1]})\n                            </span>\n                            <button\n                              className=\"p-1 ml-auto hover:opacity-100 opacity-50 transition-opacity focus:outline-none\"\n                              onClick={handleDeleteConnection(i)}\n                            >\n                              <FiTrash2 className=\"group-hover:opacity-100 opacity-30 transition-opacity\" />\n                            </button>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                </section>\n                <section className=\"mt-10\">\n                  <RangeInput\n                    value={population}\n                    onChange={setPopulation}\n                    min={50}\n                    max={1000}\n                    step={50}\n                    label=\"Population\"\n                  />\n                  <RangeInput\n                    value={mutation}\n                    onChange={setMutation}\n                    min={1}\n                    max={80}\n                    label=\"Mutation chance\"\n                    className=\"mt-4\"\n                  >\n                    {(value) => <>{value}%</>}\n                  </RangeInput>\n                </section>\n                {connectors?.length < 2 && (\n                  <button\n                    className=\"rounded-lg bg-gray-400 text-gray-100 font-bold p-3 mt-10 shadow-lg\"\n                    disabled\n                  >\n                    Start\n                  </button>\n                )}\n                {connectors?.length >= 2 && (\n                  <button\n                    className=\"rounded-lg bg-blue-600 hover:bg-blue-700 transition-colors focus:outline-none text-gray-100 font-bold p-3 mt-10 shadow-lg\"\n                    onClick={handleStart}\n                  >\n                    Start\n                  </button>\n                )}\n              </>\n            )}\n            {isRunning && (\n              <div className=\"d-flex justify-center flex-col my-auto\">\n                <h1 className=\"font-bold text-gray-700\">Generation</h1>\n                <div ref={generationRef} className=\"mx-auto mb-4\" />\n                <button\n                  className=\"rounded-lg bg-gray-500 hover:bg-gray-600 transition-colors focus:outline-none text-gray-100 font-bold p-3 shadow-lg w-full\"\n                  onClick={handleStop}\n                >\n                  Stop\n                </button>\n              </div>\n            )}\n          </div>\n        </aside>\n      </main>\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"app/App\";\nimport { Problem } from \"logic/problem\";\nimport { Individual } from \"logic/individual\";\n\ndeclare global {\n  interface Window {\n    __isRunning: boolean;\n    __drawBoard: (problem: Problem) => void;\n    __drawIndividual: (individual: Individual, problem: Problem) => void;\n    __updateGeneration: (number: number) => void;\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}